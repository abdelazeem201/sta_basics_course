/*
* Copyright 2019 Tomas Brabec
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*     http://www.apache.org/licenses/LICENSE-2.0
*     
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

library(sample_lib1) {
    /* general attributes */
    technology (cmos);
    delay_model: table_lookup;

    /* units attributes*/
    time_unit: "1ns";
    voltage_unit: "1V";
    current_unit: "1mA";
    pulling_resistance_unit: "1ohm";
    leakage_power_unit: "1nW";
    capacitive_load_unit (1,pf);

    /* thresholds */
    slew_upper_threshold_pct_rise: 80;
    slew_lower_threshold_pct_rise: 20;
    slew_upper_threshold_pct_fall: 80;
    slew_lower_threshold_pct_fall: 20;
    input_threshold_pct_rise: 50;
    input_threshold_pct_fall: 50;
    output_threshold_pct_rise: 50;
    output_threshold_pct_fall: 50;

    /* process attributes */
    nom_process: 1.0;
    nom_voltage: 1.5;
    nom_temperature: 25.0;
    operating_conditions (tc_1p5v_25c) {
        process: 1;
        voltage: 1.5;
        temperature: 25;
    }
    default_operating_conditions : tc_1p5v_25c;

    /* default attributes */
    default_input_pin_cap: 1.0;
    default_inout_pin_cap: 1.0;
    default_output_pin_cap: 1.0;
    default_fanout_load: 1.0;
    default_max_transition: 1.0;
    default_cell_leakage_power: 0.0;
    default_leakage_power_density: 0.0;

    /* declare user attributes */
    define(CELL_DESCR,cell,string);

    /* ---------------- *
     * Buffer (x1 drive strength)
     * ---------------- */
    cell(bufx1) {
        CELL_DESCR: "Non-inverting x1 buffer.";
        area: 1.2;
        cell_leakage_power: 0.1;
        pin(A) {
            direction: input;
            capacitance: 0.001;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.05;
            function: "A";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : positive_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * Buffer (x4 drive strength)
     * ---------------- */
    cell(bufx4) {
        CELL_DESCR: "Non-inverting x4 buffer.";
        area: 3.5;
        cell_leakage_power: 0.2;
        pin(A) {
            direction: input;
            capacitance: 0.002;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.2;
            function: "A";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : positive_unate ;
                cell_fall(scalar) { values("1.0"); }
                cell_rise(scalar) { values("1.0"); }
				fall_transition(scalar) { values("0.2"); }
				rise_transition(scalar) { values("0.2"); }
			}
        }
    }

    /* ---------------- *
     * Inverter (x1 drive strength)
     * ---------------- */
    cell(invx1) {
        CELL_DESCR: "Inverting x1 buffer.";
        area: 1.0;
        cell_leakage_power: 0.1;
        pin(A) {
            direction: input;
            capacitance: 0.001;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.05;
            function: "!A";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * Inverter (x2 drive strength)
     * ---------------- */
    cell(invx2) {
        CELL_DESCR: "Inverting x2 buffer.";
        area: 2.0;
        cell_leakage_power: 0.15;
        pin(A) {
            direction: input;
            capacitance: 0.002;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.1;
            function: "!A";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("1.5"); }
                cell_rise(scalar) { values("1.5"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * Inverter (x4 drive strength)
     * ---------------- */
    cell(invx4) {
        CELL_DESCR: "Inverting x4 buffer.";
        area: 2.5;
        cell_leakage_power: 0.2;
        pin(A) {
            direction: input;
            capacitance: 0.003;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.15;
            function: "!A";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("1.0"); }
                cell_rise(scalar) { values("1.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * NAND 2-input (x1 drive strength)
     * ---------------- */
    cell(nand2x1) {
        CELL_DESCR: "2-input NAND x1.";
        area: 1.3;
        cell_leakage_power: 0.1;
        pin(A) {
            direction: input;
            capacitance: 0.001;
        }
        pin(B) {
            direction: input;
            capacitance: 0.001;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.05;
            function: "!(A&B)";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
			timing () {
				related_pin        : "B" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * NOR 2-input (x1 drive strength)
     * ---------------- */
    cell(nor2x1) {
        CELL_DESCR: "2-input NOR x1.";
        area: 1.3;
        cell_leakage_power: 0.1;
        pin(A) {
            direction: input;
            capacitance: 0.001;
        }
        pin(B) {
            direction: input;
            capacitance: 0.001;
        }
        pin(Y) {
            direction: output;
            max_capacitance: 0.05;
            function: "!(A+B)";
			timing () {
				related_pin        : "A" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
			timing () {
				related_pin        : "B" ;
				timing_type        : combinational ;
				timing_sense       : negative_unate ;
                cell_fall(scalar) { values("2.0"); }
                cell_rise(scalar) { values("2.0"); }
				fall_transition(scalar) { values("0.3"); }
				rise_transition(scalar) { values("0.3"); }
			}
        }
    }

    /* ---------------- *
     * Flip-flop with async reset, posedge triggered (x1 drive strength)
     * ---------------- */
    cell(dffrx1) {
        CELL_DESCR: "Posedge D x1 flip-flop with async reset.";
        area: 6.2;
        cell_leakage_power: 0.25;
        ff (Qint,QintB) {
            next_state: "D";
            clocked_on: "CK";
            clear: "!RB";
        }
        pin(CK)  {
            direction: input;
            capacitance: 0.001;
            clock: true;
            timing() {
                related_pin: "CK";
                timing_type: min_pulse_width;
                when: "RB";
                sdf_cond: "RB == 1'b1";
                rise_constraint(scalar) { values("1.0"); }
                fall_constraint(scalar) { values("1.0"); }
            }
        }
        pin(RB)  {
            direction: input;
            capacitance: 0.001;
            timing() {
                related_pin: "RB";
                timing_type: min_pulse_width;
                fall_constraint(scalar) { values("1.0"); }
            }
            timing() {
                related_pin: "CK";
                when: "D";
                sdf_cond: "D == 1'b1";
                timing_type: recovery_rising;
                rise_constraint(scalar) { values("0.7"); }
            }
            timing() {
                related_pin: "CK";
                when: "D";
                sdf_cond: "D == 1'b1";
                timing_type: removal_rising;
                rise_constraint(scalar) { values("0.5"); }
            }
        }
        pin(D) {
            direction: input;
            capacitance: 0.001;
            timing() {
                related_pin: "CK";
                when: "RB";
                sdf_cond: "RB == 1'b1";
                timing_type: hold_rising;
                rise_constraint(scalar) { values("0.3"); }
                fall_constraint(scalar) { values("0.3"); }
            }
            timing() {
                related_pin: "CK";
                when: "RB";
                sdf_cond: "RB == 1'b1";
                timing_type: setup_rising;
                rise_constraint(scalar) { values("0.7"); }
                fall_constraint(scalar) { values("0.7"); }
            }
        }
        pin(Q) {
            direction: output;
            max_capacitance: 0.05;
            function: "Qint";
            timing() {
                related_pin: "CK";
                timing_sense: non_unate;
                timing_type: rising_edge;
                cell_rise(scalar) { values("3.0"); }
                cell_fall(scalar) { values("3.0"); }
                rise_transition(scalar) { values("0.3"); }
                fall_transition(scalar) { values("0.3"); }
            }
            timing() {
                related_pin: "RB";
                timing_sense: positive_unate;
                timing_type: clear;
                cell_fall(scalar) { values("1.0"); }
                fall_transition(scalar) { values("0.2"); }
            }
        }
    }

    /* ---------------- *
     * Flip-flop with async reset, negedge triggered (x1 drive strength)
     * ---------------- */
    cell(dffnrx1) {
        CELL_DESCR: "Negedge D x1 flip-flop with async reset.";
        area: 6.8;
        cell_leakage_power: 0.27;
        ff (Qint,QintB) {
            next_state: "D";
            clocked_on: "!CKN";
            clear: "!RB";
        }
        pin(CKN)  {
            direction: input;
            capacitance: 0.001;
            clock: true;
            timing() {
                related_pin: "CKN";
                timing_type: min_pulse_width;
                when: "RB";
                sdf_cond: "RB == 1'b1";
                rise_constraint(scalar) { values("1.0"); }
                fall_constraint(scalar) { values("1.0"); }
            }
        }
        pin(RB)  {
            direction: input;
            capacitance: 0.001;
            timing() {
                related_pin: "RB";
                timing_type: min_pulse_width;
                fall_constraint(scalar) { values("1.0"); }
            }
            timing() {
                related_pin: "CKN";
                when: "D";
                sdf_cond: "D == 1'b1";
                timing_type: recovery_falling;
                rise_constraint(scalar) { values("0.7"); }
            }
            timing() {
                related_pin: "CKN";
                when: "D";
                sdf_cond: "D == 1'b1";
                timing_type: removal_falling;
                rise_constraint(scalar) { values("0.5"); }
            }
        }
        pin(D) {
            direction: input;
            capacitance: 0.001;
            timing() {
                related_pin: "CKN";
                when: "RB";
                sdf_cond: "RB == 1'b1";
                timing_type: hold_falling;
                rise_constraint(scalar) { values("0.3"); }
                fall_constraint(scalar) { values("0.3"); }
            }
            timing() {
                related_pin: "CKN";
                when: "RB";
                sdf_cond: "RB == 1'b1";
                timing_type: setup_falling;
                rise_constraint(scalar) { values("0.7"); }
                fall_constraint(scalar) { values("0.7"); }
            }
        }
        pin(Q) {
            direction: output;
            max_capacitance: 0.05;
            function: "Qint";
            timing() {
                related_pin: "CKN";
                timing_sense: non_unate;
                timing_type: falling_edge;
                cell_rise(scalar) { values("3.0"); }
                cell_fall(scalar) { values("3.0"); }
                rise_transition(scalar) { values("0.3"); }
                fall_transition(scalar) { values("0.3"); }
            }
            timing() {
                related_pin: "RB";
                timing_sense: positive_unate;
                timing_type: clear;
                cell_fall(scalar) { values("1.0"); }
                fall_transition(scalar) { values("0.2"); }
            }
        }
    }

}
